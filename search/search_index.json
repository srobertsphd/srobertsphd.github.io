{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to WorldlyCode LLC","text":"<p>Welcome to my documentation site. Here you'll find information about my work, projects, and technical expertise.</p> <p>Visit My Personal Website</p>"},{"location":"#what-i-do","title":"What I Do","text":"<ul> <li> <p> Software Development</p> <p>Creating custom software solutions for various industries using modern technologies.</p> </li> <li> <p> Technical Documentation</p> <p>Building comprehensive documentation systems with MkDocs Material.</p> </li> <li> <p>:material-teach:{ .lg .middle } Technical Training</p> <p>Providing training sessions and workshops on software development topics.</p> </li> <li> <p> Consulting</p> <p>Offering expert technical advice and project guidance.</p> </li> </ul>"},{"location":"#featured-resources","title":"Featured Resources","text":"<ul> <li> <p> Documentation Guide</p> <p>Learn how to create beautiful documentation with MkDocs Material.</p> <p> Read the guide</p> </li> <li> <p>:material-blog:{ .lg .middle } Blog Posts</p> <p>Technical articles and tutorials on various topics.</p> <p> Visit the blog</p> </li> <li> <p> Feature Cards Example</p> <p>See how to implement these beautiful feature cards.</p> <p> View example</p> </li> <li> <p> GitHub Repository</p> <p>Check out my code on GitHub.</p> <p> Visit repository</p> </li> </ul>"},{"location":"feature-cards-example/","title":"Feature Cards Example","text":"<p>Feature cards provide an attractive way to highlight important information or features in your documentation.</p>"},{"location":"feature-cards-example/#basic-feature-cards","title":"Basic Feature Cards","text":"<ul> <li> <p> Markdown-Based</p> <p>Write all your documentation in Markdown - no HTML knowledge required.</p> </li> <li> <p> Responsive Design</p> <p>Your documentation will look great on any device, from desktop to mobile.</p> </li> <li> <p> Easy Customization</p> <p>Change colors, fonts, and layout with simple configuration.</p> </li> <li> <p>:material-search: Full-Text Search</p> <p>Powerful built-in search helps users find what they need quickly.</p> </li> </ul>"},{"location":"feature-cards-example/#mkdocs-features","title":"MkDocs Features","text":"<ul> <li> <p> Fast Setup</p> <p>Get your documentation site up and running in minutes.</p> <p> Installation guide</p> </li> <li> <p> Organized Structure</p> <p>Organize your documentation into a logical, easy-to-navigate structure.</p> <p> Navigation setup</p> </li> <li> <p> GitHub Integration</p> <p>Host your documentation for free on GitHub Pages.</p> <p> Deployment guide</p> </li> <li> <p> Powerful Extensions</p> <p>Extend functionality with plugins and extensions.</p> <p> Available plugins</p> </li> </ul>"},{"location":"feature-cards-example/#implementation-steps","title":"Implementation Steps","text":"<ul> <li> <p> Install Material Theme</p> <pre><code>pip install mkdocs-material\n</code></pre> </li> <li> <p> Configure Extensions</p> <p>Add the necessary extensions to your mkdocs.yml file.</p> </li> <li> <p> Add CSS Styling</p> <p>Include the feature cards CSS in your stylesheet.</p> </li> <li> <p> Create Cards</p> <p>Use the grid cards markdown syntax to create your cards.</p> </li> </ul>"},{"location":"feature-cards-example/#using-different-icon-styles","title":"Using Different Icon Styles","text":"<ul> <li> <p> HTML</p> <p>HTML provides the structure for your web content.</p> </li> <li> <p> CSS</p> <p>CSS controls the appearance and layout.</p> </li> <li> <p> JavaScript</p> <p>JavaScript adds interactivity to your site.</p> </li> <li> <p> Python</p> <p>Python powers MkDocs behind the scenes.</p> </li> </ul>"},{"location":"blog/","title":"Index","text":""},{"location":"blog/#blog","title":"Blog","text":"<p>Welcome to my blog! Here you'll find posts about various topics related to technology, development, and more.</p>"},{"location":"blog/#featured-categories","title":"Featured Categories","text":"<ul> <li> <p> Development</p> <p>Articles about software development, coding practices, and programming languages.</p> <p> Browse Development posts</p> </li> <li> <p> Design</p> <p>Posts about UI/UX design, visual aesthetics, and design principles.</p> <p> Browse Design posts</p> </li> <li> <p> MkDocs</p> <p>Tutorials and tips for using MkDocs and the Material theme.</p> <p> Browse MkDocs posts</p> </li> <li> <p> Tutorials</p> <p>Step-by-step guides to help you learn new skills and techniques.</p> <p> Browse Tutorials</p> </li> </ul>"},{"location":"blog/#latest-articles","title":"Latest Articles","text":"<ul> <li> <p> Creating Beautiful Feature Cards</p> <p>Learn how to create attractive feature cards in Material for MkDocs.</p> <p> Read more</p> </li> <li> <p> My First Blog Post</p> <p>Introduction to my blog and what you can expect to see here.</p> <p> Read more</p> </li> </ul>"},{"location":"blog/#what-to-expect","title":"What to Expect","text":"<ul> <li> <p> Regular Updates</p> <p>New articles published regularly with fresh insights and information.</p> </li> <li> <p> In-Depth Content</p> <p>Thorough explanations and comprehensive coverage of topics.</p> </li> <li> <p> Code Examples</p> <p>Practical code snippets and examples you can use in your projects.</p> </li> <li> <p> Q&amp;A Section</p> <p>Answers to common questions and solutions to frequent problems.</p> </li> </ul>"},{"location":"blog/2025/06/01/creating-beautiful-feature-cards/","title":"Creating Beautiful Feature Cards","text":"<p>Feature cards are an excellent way to showcase important features or sections of your documentation in a visually appealing way. They look great on landing pages and help users quickly navigate to important content.</p>","tags":["MkDocs","CSS","Layout"]},{"location":"blog/2025/06/01/creating-beautiful-feature-cards/#basic-feature-cards","title":"Basic Feature Cards","text":"<p>Here's a simple example of feature cards that you can use in your MkDocs Material site:</p> <ul> <li> HTML </li> </ul> <p>For content and document structure</p> <p> Learn more</p> <ul> <li> JavaScript </li> </ul> <p>For interactive elements and functionality</p> <p> Learn more</p> <ul> <li> CSS </li> </ul> <p>For styling and visual appearance</p> <p> Learn more</p> <ul> <li> Responsive </li> </ul> <p>Works beautifully on all devices</p> <p> Learn more</p>","tags":["MkDocs","CSS","Layout"]},{"location":"blog/2025/06/01/creating-beautiful-feature-cards/#how-to-create-feature-cards","title":"How To Create Feature Cards","text":"<p>Creating feature cards in Material for MkDocs is simple. You need three things:</p> <ol> <li>The required markdown extensions in your <code>mkdocs.yml</code></li> <li>CSS styling for the cards (which we've already added)</li> <li>The proper markdown syntax for creating the cards</li> </ol>","tags":["MkDocs","CSS","Layout"]},{"location":"blog/2025/06/01/creating-beautiful-feature-cards/#markdown-extensions","title":"Markdown Extensions","text":"<p>Make sure you have these extensions in your <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - attr_list\n  - md_in_html\n  - pymdownx.emoji:\n      emoji_index: !!python/name:material.extensions.emoji.twemoji\n      emoji_generator: !!python/name:material.extensions.emoji.to_svg\n</code></pre>","tags":["MkDocs","CSS","Layout"]},{"location":"blog/2025/06/01/creating-beautiful-feature-cards/#markdown-syntax","title":"Markdown Syntax","text":"<p>The basic syntax for creating feature cards is:</p> <pre><code>&lt;div class=\"grid cards\" markdown&gt;\n\n- :icon-name: __Card Title__ \n\n  ---\n\n  Card content goes here\n\n  [:octicons-arrow-right-24: Link text](#)\n\n- :icon-name: __Another Card__ \n\n  ---\n\n  More content here\n\n  [:octicons-arrow-right-24: Another link](#)\n\n&lt;/div&gt;\n</code></pre>","tags":["MkDocs","CSS","Layout"]},{"location":"blog/2025/06/01/creating-beautiful-feature-cards/#more-complex-example","title":"More Complex Example","text":"<p>Here's a more complex example showing cards with different icons and styles:</p> <ul> <li> <p> Quick Setup</p> <p>Set up your documentation site in minutes with simple configuration</p> <p> Installation guide</p> </li> <li> <p> Extensive Documentation</p> <p>Comprehensive guides and examples for all features</p> <p> Browse docs</p> </li> <li> <p> Easy Customization</p> <p>Change colors, fonts, and layouts with simple configuration</p> <p> Styling guide</p> </li> <li> <p> Responsive Design</p> <p>Documentation that looks great on any device - desktop, tablet, or mobile</p> <p> Layout options</p> </li> </ul>","tags":["MkDocs","CSS","Layout"]},{"location":"blog/2025/06/01/creating-beautiful-feature-cards/#finding-icons","title":"Finding Icons","text":"<p>Material for MkDocs includes thousands of icons you can use in your cards:</p> <ul> <li>Material Design Icons</li> <li>FontAwesome Icons</li> <li>Octicons</li> </ul> <p>Use them with syntax like <code>:material-account:</code>, <code>:fontawesome-brands-github:</code> or <code>:octicons-rocket-24:</code>.</p>","tags":["MkDocs","CSS","Layout"]},{"location":"blog/2025/06/01/creating-beautiful-feature-cards/#card-sizing","title":"Card Sizing","text":"<p>You can control the number of columns in your grid by changing the CSS. The default styles adapt to screen size automatically, but you can also create custom CSS rules for specific layouts.</p> <p>Feature cards are a powerful way to enhance your documentation and create a modern, professional look. They're especially useful for landing pages and section overviews. </p>","tags":["MkDocs","CSS","Layout"]},{"location":"blog/2025/05/31/my-first-blog-post/","title":"My First Blog Post","text":"<p>This is my first blog post with MkDocs.</p> <p>The content above the <code>&lt;!-- more --&gt;</code> comment will be shown as an excerpt on the blog index page.</p>","tags":["MkDocs","Documentation"]},{"location":"mkdocs/","title":"MkDocs Documentation","text":"<p>Welcome to the MkDocs documentation section. Here you'll find guides and resources to help you customize and enhance your MkDocs Material site.</p>"},{"location":"mkdocs/#available-guides","title":"Available Guides","text":"<ul> <li> <p> Feature Cards Guide</p> <p>Learn how to implement attractive feature cards like those used throughout this site.</p> <p> View Guide</p> </li> <li> <p> Feature Cards Examples</p> <p>See various examples of feature cards in action with different styles and layouts.</p> <p> View Examples</p> </li> <li> <p> Coming Soon</p> <p>More documentation guides will be added soon!</p> </li> </ul>"},{"location":"mkdocs/#about-mkdocs-material","title":"About MkDocs Material","text":"<p>MkDocs Material is a powerful documentation theme that makes it easy to create beautiful, responsive documentation sites. The theme is:</p> <ul> <li> <p> Fast and Lightweight</p> <p>Built for performance with minimal overhead.</p> </li> <li> <p> Responsive</p> <p>Looks great on any device - desktop, tablet, or mobile.</p> </li> <li> <p> Customizable</p> <p>Easy to customize with a wide range of theming options.</p> </li> <li> <p>:material-search:{ .lg .middle } Full-Text Search</p> <p>Powerful search functionality built in.</p> </li> </ul>"},{"location":"mkdocs/#resources","title":"Resources","text":"<ul> <li> <p> Official Documentation</p> <p>Visit the official MkDocs Material documentation for comprehensive guides.</p> <p> Material for MkDocs</p> </li> <li> <p> GitHub Repository</p> <p>Explore the source code and contribute to the project.</p> <p> GitHub Repository</p> </li> </ul>"},{"location":"mkdocs/cursor-help/","title":"Cursor Help","text":"<p>I'll create a comprehensive documentation page that outlines everything we've done to implement feature cards and improve the blog. Let's add this to your MkDocs directory:</p> <p>Now I'll update your site's navigation to include this new guide in the appropriate section:</p> <p>Now let's create an index page for the MkDocs section to make navigation more complete:</p> <p>Now let's update the navigation to include the index page:</p> <p>Let's create a feature cards example page to demonstrate different variations of the feature cards:</p> <p>Now let's update the navigation to include the examples page:</p> <p>Now let's update the feature cards guide to link to the examples page:</p> <p>Let's also update the MkDocs index page to include a link to the examples:</p> <p>Let's run the MkDocs server to test our changes:</p> <p><pre><code>cd /home/sng/srobertsphd.github.io &amp;&amp; mkdocs serve\n</code></pre> I've created a comprehensive documentation page that outlines all the feature card implementations and blog customizations we've done. Here's what I've added:</p> <ol> <li>Feature Cards Guide (<code>docs/mkdocs/feature-cards-guide.md</code>)</li> <li>Detailed documentation of CSS implementation</li> <li>Markdown syntax for creating feature cards</li> <li>Icon usage and customization options</li> <li>Blog customization details</li> <li> <p>Template modifications</p> </li> <li> <p>Feature Cards Examples (<code>docs/mkdocs/feature-cards-examples.md</code>)</p> </li> <li>Demonstrations of various card styles</li> <li>Examples with different icon sizes</li> <li>Cards with lists, code blocks, and images</li> <li> <p>Layout variations</p> </li> <li> <p>MkDocs Section Index (<code>docs/mkdocs/index.md</code>)</p> </li> <li>Overview of MkDocs Material features</li> <li>Links to guides and examples</li> <li> <p>Feature cards showcasing capabilities</p> </li> <li> <p>Updated Navigation</p> </li> <li>Added MkDocs section with hierarchical structure</li> <li>Included all new pages in the site navigation</li> </ol> <p>The documentation covers everything we've implemented, including: - Feature cards CSS and markdown implementation - Blog customization with the index-content wrapper - Custom templates for archive and category pages - Navigation improvements and styling changes</p> <p>Would you like me to add any additional information or make any changes to the documentation?</p>"},{"location":"mkdocs/deploy-guide/","title":"Deploying MkDocs to your GitHub Pages domain","text":"<p>Every GitHub account gets one special domain for hosting web content. It follows the format <code>yourusername.github.io</code>. The cool thing is you can use this domain to host an MkDocs site without having to add your repository name to the URL.</p> <p>I recently figured out how to do this properly, and wanted to document the process for anyone else trying to deploy an MkDocs site to their main GitHub Pages domain.</p> <p>Here's what you need to know:</p>"},{"location":"mkdocs/deploy-guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>A GitHub account</li> <li>A repository named <code>username.github.io</code> (replace username with your GitHub username)</li> <li>MkDocs installed locally</li> </ul>"},{"location":"mkdocs/deploy-guide/#step-1-configure-your-mkdocs-site","title":"Step 1: Configure Your MkDocs Site","text":"<p>Ensure your <code>mkdocs.yml</code> file has the correct site URL:</p> <pre><code>site_name: Your Site Name\nsite_description: Your site description\nsite_url: https://username.github.io/\n</code></pre>"},{"location":"mkdocs/deploy-guide/#step-2-deploy-to-github-pages","title":"Step 2: Deploy to GitHub Pages","text":"<p>Deploy your site using the MkDocs gh-deploy command:</p> <pre><code>mkdocs gh-deploy --force\n</code></pre> <p>This command: - Builds your site to a temporary directory (usually <code>site/</code>) - Creates or updates a branch called <code>gh-pages</code> - Places all built files at the root of the <code>gh-pages</code> branch - Pushes the changes to GitHub</p> <p>The <code>--force</code> flag ensures a clean deployment by completely replacing the contents of the <code>gh-pages</code> branch.</p>"},{"location":"mkdocs/deploy-guide/#step-3-configure-github-pages-settings","title":"Step 3: Configure GitHub Pages Settings","text":"<ol> <li>Go to your GitHub repository</li> <li>Click on \"Settings\"</li> <li>In the left sidebar, click on \"Pages\"</li> <li>Under \"Build and deployment\" &gt; \"Source\", select:</li> <li>Deploy from a branch</li> <li>Branch: gh-pages</li> <li>Folder: / (root)</li> <li>Click \"Save\"</li> </ol>"},{"location":"mkdocs/deploy-guide/#step-4-wait-for-deployment","title":"Step 4: Wait for Deployment","text":"<p>GitHub will start building your site. This typically takes a few minutes. Once complete, your site will be available at <code>https://username.github.io</code>.</p>"},{"location":"mkdocs/deploy-guide/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>404 Error: Make sure your GitHub Pages settings are correctly pointing to the gh-pages branch</li> <li>Cache Issues: Try clearing your browser cache or using incognito mode</li> <li>Deployment Errors: Check the Actions tab in your GitHub repository for any error messages</li> </ul>"},{"location":"mkdocs/deploy-guide/#updating-your-site","title":"Updating Your Site","text":"<p>Whenever you make changes to your site:</p> <ol> <li>Make your changes locally</li> <li>Test with <code>mkdocs serve</code></li> <li>When ready, run <code>mkdocs gh-deploy --force</code> again</li> <li>Wait a few minutes for GitHub to update your site</li> </ol> <p>That's it! Your MkDocs site should now be available at your GitHub username domain. </p>"},{"location":"mkdocs/feature-cards-examples/","title":"Feature Cards Examples","text":"<p>This page demonstrates various examples of feature cards and their variations.</p>"},{"location":"mkdocs/feature-cards-examples/#basic-feature-cards","title":"Basic Feature Cards","text":"<ul> <li> HTML </li> </ul> <p>The standard markup language for creating web pages</p> <p> Learn HTML</p> <ul> <li> CSS </li> </ul> <p>The language for styling and laying out web pages</p> <p> Learn CSS</p> <ul> <li> JavaScript </li> </ul> <p>The programming language of the web</p> <p> Learn JavaScript</p> <ul> <li> Python </li> </ul> <p>A powerful general-purpose programming language</p> <p> Learn Python</p>"},{"location":"mkdocs/feature-cards-examples/#cards-with-large-icons","title":"Cards with Large Icons","text":"<ul> <li> Quick Setup</li> </ul> <p>Set up your documentation site in minutes with simple configuration</p> <p> Installation guide</p> <ul> <li> Documentation</li> </ul> <p>Comprehensive guides and examples for all features</p> <p> Browse docs</p> <ul> <li> Customization</li> </ul> <p>Change colors, fonts, and layouts with simple configuration</p> <p> Styling guide</p> <ul> <li> Responsive</li> </ul> <p>Documentation that looks great on any device</p> <p> Layout options</p>"},{"location":"mkdocs/feature-cards-examples/#cards-with-extra-large-icons","title":"Cards with Extra Large Icons","text":"<ul> <li> Getting Started</li> </ul> <p>Begin your journey with our comprehensive quickstart guide</p> <p> Quickstart</p> <ul> <li> Learning Resources</li> </ul> <p>Tutorials, examples, and documentation to help you learn</p> <p> Resources</p>"},{"location":"mkdocs/feature-cards-examples/#cards-with-centered-extra-extra-large-icons","title":"Cards with Centered Extra Extra Large Icons","text":"<ul> <li> React</li> </ul> <p>A JavaScript library for building user interfaces</p> <p> Learn React</p> <ul> <li> Vue.js</li> </ul> <p>The progressive JavaScript framework</p> <p> Learn Vue</p> <ul> <li> Angular</li> </ul> <p>A platform for building mobile and desktop web applications</p> <p> Learn Angular</p>"},{"location":"mkdocs/feature-cards-examples/#two-column-layout","title":"Two-Column Layout","text":"<ul> <li> Authentication</li> </ul> <p>Secure user authentication and authorization</p> <p> Learn more</p> <ul> <li> Database</li> </ul> <p>Fast and reliable data storage</p> <p> Learn more</p>"},{"location":"mkdocs/feature-cards-examples/#cards-with-lists","title":"Cards with Lists","text":"<ul> <li> Features</li> </ul> <ul> <li>Responsive design</li> <li>Cross-browser compatibility</li> <li>Mobile-first approach</li> <li>Accessibility built-in</li> </ul> <p> View all features</p> <ul> <li> Tools</li> </ul> <ul> <li>Code editor integration</li> <li>Command-line interface</li> <li>Debugging tools</li> <li>Performance analyzers</li> </ul> <p> View all tools</p>"},{"location":"mkdocs/feature-cards-examples/#cards-with-code-blocks","title":"Cards with Code Blocks","text":"<ul> <li> Installation</li> </ul> <p>Install using npm:</p> <pre><code>npm install my-package --save\n</code></pre> <p> Installation guide</p> <ul> <li> Usage</li> </ul> <p>Basic usage example:</p> <pre><code>import { myFunction } from 'my-package';\n\nconst result = myFunction();\nconsole.log(result);\n</code></pre> <p> API reference</p>"},{"location":"mkdocs/feature-cards-examples/#cards-with-images","title":"Cards with Images","text":"<ul> <li> Screenshots</li> </ul> <p>Interface screenshot example</p> <p> View gallery</p> <ul> <li> Analytics</li> </ul> <p></p> <p>Performance metrics visualization</p> <p> View reports</p>"},{"location":"mkdocs/feature-cards-examples/#cards-without-links","title":"Cards Without Links","text":"<ul> <li> High Quality</li> </ul> <p>Built with attention to detail and focus on performance</p> <ul> <li> Secure</li> </ul> <p>Security best practices implemented at every level</p> <ul> <li> Regular Updates</li> </ul> <p>Continuous improvements and new features</p> <ul> <li> Community</li> </ul> <p>Active community and dedicated support team</p>"},{"location":"mkdocs/feature-cards-examples/#custom-colored-icons","title":"Custom Colored Icons","text":"<p>To use custom colored icons, you can use inline HTML with custom styling:</p> <ul> <li>verified Verified</li> </ul> <p>All components are thoroughly tested and verified</p> <ul> <li>eco Eco-Friendly</li> </ul> <p>Optimized for minimal resource consumption</p>"},{"location":"mkdocs/feature-cards-guide/","title":"Feature Cards &amp; Blog Customization Guide","text":"<p>This guide documents the implementation of feature cards and blog customization for this MkDocs Material site.</p> <p>See Examples</p> <p>Check out the Feature Cards Examples page to see various types of feature cards in action!</p>"},{"location":"mkdocs/feature-cards-guide/#feature-cards-overview","title":"Feature Cards Overview","text":"<p>Feature cards provide an attractive way to showcase important content in a grid layout. They offer:</p> <ul> <li>Visual appeal with icons and hover effects</li> <li>Responsive design that adapts to screen size</li> <li>Flexible content including text, links, and code</li> <li>Consistent styling throughout the site</li> </ul>"},{"location":"mkdocs/feature-cards-guide/#implementation-steps","title":"Implementation Steps","text":""},{"location":"mkdocs/feature-cards-guide/#1-enable-required-extensions","title":"1. Enable Required Extensions","text":"<p>First, ensure these extensions are enabled in <code>mkdocs.yml</code>:</p> <pre><code>markdown_extensions:\n  - attr_list\n  - md_in_html\n  - pymdownx.emoji:\n      emoji_index: !!python/name:material.extensions.emoji.twemoji\n      emoji_generator: !!python/name:material.extensions.emoji.to_svg\n</code></pre>"},{"location":"mkdocs/feature-cards-guide/#2-add-css-styling","title":"2. Add CSS Styling","text":"<p>Add the following CSS to your stylesheet (<code>docs/assets/stylesheets/blog-custom.css</code>):</p> <pre><code>/* Feature Cards Grid Styling */\n.md-typeset .grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(16rem, 1fr));\n  gap: 1rem;\n  margin: 1rem 0;\n}\n\n.md-typeset .grid.cards {\n  grid-template-columns: repeat(auto-fit, minmax(16rem, 1fr));\n}\n\n/* Card Styling */\n.md-typeset .grid.cards &gt; ul {\n  display: contents;\n}\n\n.md-typeset .grid.cards &gt; ul &gt; li,\n.md-typeset .grid.cards &gt; li,\n.md-typeset .grid &gt; .card {\n  border: 0.05rem solid var(--md-default-fg-color--lightest);\n  border-radius: 0.5rem;\n  padding: 1rem;\n  transition: transform 0.25s, box-shadow 0.25s;\n  box-shadow: var(--md-shadow-z1);\n  margin: 0;\n  list-style: none;\n}\n\n.md-typeset .grid.cards &gt; ul &gt; li:hover,\n.md-typeset .grid.cards &gt; li:hover,\n.md-typeset .grid &gt; .card:hover {\n  transform: translateY(-0.2rem);\n  box-shadow: var(--md-shadow-z2);\n}\n\n/* Card Separator Line */\n.md-typeset .grid.cards &gt; ul &gt; li &gt; hr,\n.md-typeset .grid.cards &gt; li &gt; hr,\n.md-typeset .grid &gt; .card &gt; hr {\n  margin-top: 0.5rem;\n  margin-bottom: 0.5rem;\n  display: block;\n}\n\n/* Card Icon Styling */\n.md-typeset .grid.cards &gt; ul &gt; li &gt; p:first-child &gt; .lg,\n.md-typeset .grid.cards &gt; li &gt; p:first-child &gt; .lg,\n.md-typeset .grid &gt; .card &gt; p:first-child &gt; .lg {\n  font-size: 2.5rem;\n  float: right;\n  margin-top: -0.5rem;\n  margin-bottom: -0.5rem;\n}\n\n/* Card Title Styling */\n.md-typeset .grid.cards &gt; ul &gt; li &gt; p:first-child &gt; strong,\n.md-typeset .grid.cards &gt; li &gt; p:first-child &gt; strong,\n.md-typeset .grid &gt; .card &gt; p:first-child &gt; strong {\n  font-size: 1.25rem;\n  font-weight: 700;\n  line-height: 1.6;\n  display: block;\n  padding-right: 2.5rem;\n}\n\n/* Icon Sizing Classes */\n.md-typeset .lg {\n  font-size: 1.5rem;\n  vertical-align: text-top;\n}\n\n.md-typeset .xl {\n  font-size: 2rem;\n  vertical-align: text-top;\n}\n\n.md-typeset .xxl {\n  font-size: 3rem;\n  vertical-align: middle;\n}\n\n/* Icon Positioning Classes */\n.md-typeset .middle {\n  vertical-align: middle;\n}\n\n.md-typeset .center {\n  text-align: center;\n}\n</code></pre>"},{"location":"mkdocs/feature-cards-guide/#3-feature-cards-markdown-syntax","title":"3. Feature Cards Markdown Syntax","text":"<p>The basic syntax for creating feature cards is:</p> <pre><code>&lt;div class=\"grid cards\" markdown&gt;\n\n- :icon-name: __Card Title__ \n\n  ---\n\n  Card content goes here\n\n  [:octicons-arrow-right-24: Link text](#)\n\n- :icon-name: __Another Card__ \n\n  ---\n\n  More content here\n\n  [:octicons-arrow-right-24: Another link](#)\n\n&lt;/div&gt;\n</code></pre> <p>Key components: - Container: <code>&lt;div class=\"grid cards\" markdown&gt;</code> - List items: Each card is a list item with icon, title, separator, content, and optional link - Icons: Use Material Design Icons, FontAwesome, or Octicons - Title: Bold text with double underscores <code>__Title__</code> - Separator: Horizontal rule <code>---</code> - Link: Optional link at the bottom using Markdown syntax</p>"},{"location":"mkdocs/feature-cards-guide/#card-variations","title":"Card Variations","text":""},{"location":"mkdocs/feature-cards-guide/#basic-cards","title":"Basic Cards","text":"<pre><code>&lt;div class=\"grid cards\" markdown&gt;\n\n- :fontawesome-brands-html5: __HTML__ \n\n  ---\n\n  For content and document structure\n\n  [:octicons-arrow-right-24: Learn more](#)\n\n- :fontawesome-brands-js: __JavaScript__ \n\n  ---\n\n  For interactive elements and functionality\n\n  [:octicons-arrow-right-24: Learn more](#)\n\n&lt;/div&gt;\n</code></pre>"},{"location":"mkdocs/feature-cards-guide/#cards-with-custom-icon-sizes","title":"Cards with Custom Icon Sizes","text":"<pre><code>&lt;div class=\"grid cards\" markdown&gt;\n\n- :material-clock-fast:{ .lg .middle } __Quick Setup__\n\n  ---\n\n  Set up your documentation site in minutes\n\n  [:octicons-arrow-right-24: Installation guide](#)\n\n&lt;/div&gt;\n</code></pre>"},{"location":"mkdocs/feature-cards-guide/#cards-with-centered-icons","title":"Cards with Centered Icons","text":"<pre><code>&lt;div class=\"grid cards\" markdown&gt;\n\n- :fontawesome-brands-html5:{ .xxl .center } __HTML__\n\n  ---\n\n  HTML provides the structure for your web content.\n\n&lt;/div&gt;\n</code></pre>"},{"location":"mkdocs/feature-cards-guide/#blog-customization","title":"Blog Customization","text":"<p>In addition to feature cards, we've customized the blog in several ways:</p>"},{"location":"mkdocs/feature-cards-guide/#1-enhanced-blog-landing-page","title":"1. Enhanced Blog Landing Page","text":"<p>The blog landing page has been customized with feature cards for categories and recent posts:</p> <pre><code>&lt;div class=\"index-content\" markdown&gt;\n\n# Blog\n\nWelcome to my blog!\n\n## Featured Categories\n\n&lt;div class=\"grid cards\" markdown&gt;\n\n- :material-code-tags:{ .lg .middle } __Development__\n\n    ---\n\n    Articles about software development.\n\n    [:octicons-arrow-right-24: Browse posts](topics/development/)\n\n&lt;/div&gt;\n\n## Latest Articles\n\n&lt;div class=\"grid cards\" markdown&gt;\n\n- :fontawesome-solid-calendar:{ .lg .middle } __Article Title__\n\n    ---\n\n    Article description.\n\n    [:octicons-arrow-right-24: Read more](posts/article-slug/)\n\n&lt;/div&gt;\n\n&lt;/div&gt;\n</code></pre>"},{"location":"mkdocs/feature-cards-guide/#2-modified-blog-plugin-configuration","title":"2. Modified Blog Plugin Configuration","text":"<p>The blog plugin configuration has been updated in <code>mkdocs.yml</code>:</p> <pre><code>plugins:\n  - blog:\n      blog_dir: blog\n      post_dir: \"{blog}/posts\"\n      post_date_format: long\n      post_url_format: \"{date}/{slug}\"\n      pagination: true\n      pagination_per_page: 5\n      # Disable archive and categories in navigation\n      archive: false\n      categories: false\n      # Keep them accessible via URLs\n      archive_name: \"Past Posts\"\n      archive_date_format: \"yyyy\"\n      archive_url_format: \"archive/{date}\"\n      categories_name: \"Topics\"\n      categories_url_format: \"topics/{slug}\"\n      categories_toc: false\n      # Custom templates\n      archive_template: \"blog/templates/archive.html\"\n      category_template: \"blog/templates/category.html\"\n</code></pre>"},{"location":"mkdocs/feature-cards-guide/#3-custom-templates-for-archive-and-category-pages","title":"3. Custom Templates for Archive and Category Pages","text":"<p>Custom templates were created for archive and category pages to improve their appearance:</p>"},{"location":"mkdocs/feature-cards-guide/#category-template-docsblogtemplatescategoryhtml","title":"Category Template (<code>docs/blog/templates/category.html</code>):","text":"<pre><code>{% extends \"blog-meta.html\" %}\n\n{% block post_title %}\n  &lt;h1&gt;{{ title }}&lt;/h1&gt;\n  &lt;a href=\"../..\" class=\"blog-back-button\"&gt;\n    &lt;span class=\"twemoji\"&gt;\n      {% include \".icons/octicons/arrow-left-24.svg\" %}\n    &lt;/span&gt; \n    Back to Blog\n  &lt;/a&gt;\n{% endblock %}\n\n{% block post_content %}\n  {{ content }}\n{% endblock %}\n</code></pre>"},{"location":"mkdocs/feature-cards-guide/#archive-template-docsblogtemplatesarchivehtml","title":"Archive Template (<code>docs/blog/templates/archive.html</code>):","text":"<pre><code>{% extends \"blog-meta.html\" %}\n\n{% block post_title %}\n  &lt;h1&gt;{{ title }}&lt;/h1&gt;\n  &lt;a href=\"../..\" class=\"blog-back-button\"&gt;\n    &lt;span class=\"twemoji\"&gt;\n      {% include \".icons/octicons/arrow-left-24.svg\" %}\n    &lt;/span&gt; \n    Back to Blog\n  &lt;/a&gt;\n{% endblock %}\n\n{% block post_content %}\n  {{ content }}\n{% endblock %}\n</code></pre>"},{"location":"mkdocs/feature-cards-guide/#4-additional-css-for-blog-styling","title":"4. Additional CSS for Blog Styling","text":"<p>Additional CSS was added to style the blog index, category, and archive pages:</p> <pre><code>/* Blog index page styling */\n.md-typeset .blog &gt; .index-content {\n  margin-bottom: 3rem;\n  border-bottom: 1px solid var(--md-default-fg-color--lightest);\n  padding-bottom: 2rem;\n}\n\n/* Blog index separator */\n.md-typeset .blog &gt; .index-content + .post:before,\n.md-typeset .blog &gt; .index-content + h2:before {\n  content: \"Recent Posts\";\n  display: block;\n  font-size: 2rem;\n  font-weight: 700;\n  margin: 2rem 0;\n  color: var(--md-primary-fg-color);\n}\n\n/* Hide duplicate Recent Posts heading */\n.md-typeset .blog &gt; .index-content + h2 {\n  display: none;\n}\n\n/* Style for auto-generated blog posts on index */\n.md-typeset .blog &gt; .post {\n  margin-top: 1.5rem;\n  margin-bottom: 2.5rem;\n  padding: 2rem;\n  border-radius: 0.5rem;\n  background-color: var(--md-default-bg-color);\n  box-shadow: var(--md-shadow-z1);\n  border: 1px solid var(--md-default-fg-color--lightest);\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n/* Category and Archive Page Styling */\n.md-typeset .blog h1 {\n  font-size: 2.5rem;\n  margin-bottom: 2rem;\n  color: var(--md-primary-fg-color);\n  border-bottom: 1px solid var(--md-default-fg-color--lightest);\n  padding-bottom: 0.5rem;\n}\n\n/* Back button for category and archive pages */\n.md-typeset .blog .blog-back-button {\n  display: inline-block;\n  margin-bottom: 2rem;\n  padding: 0.6rem 1.2rem;\n  background-color: var(--md-primary-fg-color);\n  color: var(--md-primary-bg-color) !important;\n  border-radius: 4px;\n  font-weight: 500;\n  text-decoration: none;\n  transition: background-color 0.2s ease;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n}\n</code></pre>"},{"location":"mkdocs/feature-cards-guide/#available-icon-sets","title":"Available Icon Sets","text":"<p>Material for MkDocs provides several icon sets:</p> <ol> <li>Material Design Icons:</li> <li>Prefix: <code>:material-</code></li> <li>Example: <code>:material-account:</code>, <code>:material-home:</code></li> <li> <p>Browse all Material Design Icons</p> </li> <li> <p>FontAwesome Icons:</p> </li> <li>Prefix: <code>:fontawesome-brands-</code> or <code>:fontawesome-solid-</code></li> <li>Example: <code>:fontawesome-brands-github:</code>, <code>:fontawesome-solid-user:</code></li> <li> <p>Browse all FontAwesome Icons</p> </li> <li> <p>Octicons (GitHub's icons):</p> </li> <li>Prefix: <code>:octicons-</code></li> <li>Example: <code>:octicons-repo-24:</code>, <code>:octicons-arrow-right-24:</code></li> <li>Browse all Octicons</li> </ol>"},{"location":"mkdocs/feature-cards-guide/#using-icon-modifiers","title":"Using Icon Modifiers","text":"<p>You can modify icons with special classes:</p> <pre><code>:material-icon:{ .lg }             &lt;!-- Larger icon --&gt;\n:material-icon:{ .xl }             &lt;!-- Extra large icon --&gt;\n:material-icon:{ .xxl }            &lt;!-- Extra extra large icon --&gt;\n:material-icon:{ .middle }         &lt;!-- Vertically aligned to middle --&gt;\n:material-icon:{ .center }         &lt;!-- Horizontally centered --&gt;\n:material-icon:{ .lg .middle }     &lt;!-- Combined modifiers --&gt;\n</code></pre>"},{"location":"mkdocs/feature-cards-guide/#tips-for-feature-cards","title":"Tips for Feature Cards","text":"<ol> <li>Responsive Design: </li> <li>Cards automatically adjust to screen size</li> <li>On mobile, they stack vertically</li> <li> <p>On larger screens, they form a grid</p> </li> <li> <p>Content Flexibility:</p> </li> <li>Cards can contain any Markdown content</li> <li> <p>Include code blocks, lists, or even images</p> </li> <li> <p>Hover Effects:</p> </li> <li>Cards have a subtle elevation effect on hover</li> <li> <p>This creates a clean, modern UI feel</p> </li> <li> <p>Card Height:</p> </li> <li>Cards in the same row will have the same height</li> <li> <p>Keep content length relatively consistent for best appearance</p> </li> <li> <p>Performance:</p> </li> <li>CSS transitions are hardware-accelerated for smooth effects</li> <li>The layout is optimized for quick rendering</li> </ol>"},{"location":"mkdocs/feature-cards-guide/#complete-example","title":"Complete Example","text":"<p>Here's a complete example of feature cards in action:</p> <pre><code>## Feature Overview\n\n&lt;div class=\"grid cards\" markdown&gt;\n\n- :material-speedometer:{ .lg .middle } __Performance__\n\n    ---\n\n    Optimized for speed and efficiency with minimal overhead.\n\n    [:octicons-arrow-right-24: Performance tips](#)\n\n- :material-shield-lock:{ .lg .middle } __Security__\n\n    ---\n\n    Built with security best practices from the ground up.\n\n    [:octicons-arrow-right-24: Security guide](#)\n\n- :material-devices:{ .lg .middle } __Responsive__\n\n    ---\n\n    Works beautifully on all devices from mobile to desktop.\n\n    [:octicons-arrow-right-24: Layout options](#)\n\n- :material-theme-light-dark:{ .lg .middle } __Theming__\n\n    ---\n\n    Easy to customize with light and dark themes.\n\n    [:octicons-arrow-right-24: Theme customization](#)\n\n&lt;/div&gt;\n</code></pre> <p>This guide covers all the customizations made to the site, focusing on feature cards and blog enhancements. </p>"},{"location":"mkdocs/gd-alternatives/","title":"Gd alternatives","text":"<p>Yes \u2014 here are some alternatives to Google Docs that meet most of your goals (ubiquity, ease of use, collaborative editing, and structured export), and that may even integrate more smoothly depending on the tooling and workflows you prefer:</p>"},{"location":"mkdocs/gd-alternatives/#1-microsoft-word-online-office-365","title":"\ud83d\udd39 1. Microsoft Word Online (Office 365)","text":"<ul> <li>Why it might work: Ubiquitous in enterprise and education. Like Google Docs, allows real-time collaboration. Can export as PDF, DOCX, or even HTML. Can be accessed via Microsoft Graph API.</li> <li>Export/Integration: Automatable via Microsoft Graph API, including conversion to PDF.</li> <li>Pros: Familiar UI. Good layout fidelity. Strong enterprise support.</li> <li>Cons: Requires Microsoft account (not everyone has it). Slightly heavier interface. API is more complex to set up than Google\u2019s.</li> </ul>"},{"location":"mkdocs/gd-alternatives/#2-notion","title":"\ud83d\udd39 2. Notion","text":"<ul> <li>Why it might work: Gaining wide adoption in teams. Easy to use. Collaborative. Can export pages to Markdown or PDF.</li> <li>Export/Integration: Can be scripted with Notion API to pull Markdown or HTML. PDFs require headless browser automation.</li> <li>Pros: Clean formatting, good for structured docs. Markdown export is decent.</li> <li>Cons: Markdown export may require cleanup. PDF export not available via API (yet). Not everyone uses it by default.</li> </ul>"},{"location":"mkdocs/gd-alternatives/#3-dropbox-paper","title":"\ud83d\udd39 3. Dropbox Paper","text":"<ul> <li>Why it might work: Very simple collaborative editor. Exports to Markdown. Works well for lightweight docs.</li> <li>Export/Integration: Markdown export is available. PDF via print-to-PDF (not easily scriptable).</li> <li>Pros: Cleaner Markdown than Google Docs. Minimalist UI. Easy sharing.</li> <li>Cons: Less widely used than Google Docs or Microsoft Word. Automation is limited.</li> </ul>"},{"location":"mkdocs/gd-alternatives/#4-hackmd-codimd","title":"\ud83d\udd39 4. HackMD / CodiMD","text":"<ul> <li>Why it might work: Real-time collaborative Markdown editor. Works in the browser. Ideal if your team is willing to use Markdown directly.</li> <li>Export/Integration: Native Markdown format. Easy to save/export via Git integration.</li> <li>Pros: Native to Markdown. Versioning, GitHub integration. Open-source options.</li> <li>Cons: Requires Markdown fluency. Not as broadly known as Google Docs. More tech-friendly than general-friendly.</li> </ul>"},{"location":"mkdocs/gd-alternatives/#5-etherpad","title":"\ud83d\udd39 5. Etherpad","text":"<ul> <li>Why it might work: Lightweight collaborative plain-text/Markdown editor. Open source. Can self-host or use public pads.</li> <li>Export/Integration: Text export (Markdown if you enforce it). API available.</li> <li>Pros: Extremely lightweight. Zero login. Great for open collaboration.</li> <li>Cons: Primitive formatting. Poor for images/tables. Not widely adopted beyond tech/hackathon circles.</li> </ul>"},{"location":"mkdocs/gd-alternatives/#6-confluence-atlassian","title":"\ud83d\udd39 6. Confluence (Atlassian)","text":"<ul> <li>Why it might work: Used by many orgs for internal docs. Structured content. Exportable to PDF/Word.</li> <li>Export/Integration: Has REST API. PDF export can be automated with plugins or headless browsers.</li> <li>Pros: Powerful. Familiar to enterprise teams. Organizes pages well.</li> <li>Cons: Not everyone has access. Not free. Heavier weight. Steeper learning curve.</li> </ul>"},{"location":"mkdocs/gd-alternatives/#final-opinion","title":"\u2705 Final Opinion","text":"<p>Google Docs is probably still the best overall fit for your needs:</p> <ul> <li>Almost everyone already uses it.</li> <li>It handles images/tables well.</li> <li>It can export clean PDFs or Markdown.</li> <li>The API is scriptable.</li> <li>The versioning (named versions) adds value.</li> </ul> <p>The closest viable alternatives are:</p> <ul> <li>Microsoft Word Online (if your user base leans Microsoft).</li> <li>HackMD (if your users are developers or markdown-fluent).</li> </ul> <p>If you're open to lighter alternatives or your users are more technical, a Markdown-first tool like HackMD could simplify your entire pipeline and skip conversion entirely. But if you want to support anyone, Google Docs is still king for a write-anywhere \u2192 publish-anywhere model.</p> <p>Yes \u2014 here are some alternatives to Google Docs that meet most of your goals (ubiquity, ease of use, collaborative editing, and structured export), and that may even integrate more smoothly depending on the tooling and workflows you prefer:</p>"},{"location":"mkdocs/gd-alternatives/#1-microsoft-word-online-office-365_1","title":"\ud83d\udd39 1. Microsoft Word Online (Office 365)","text":"<ul> <li>Why it might work: Ubiquitous in enterprise and education. Like Google Docs, allows real-time collaboration. Can export as PDF, DOCX, or even HTML. Can be accessed via Microsoft Graph API.</li> <li>Export/Integration: Automatable via Microsoft Graph API, including conversion to PDF.</li> <li>Pros: Familiar UI. Good layout fidelity. Strong enterprise support.</li> <li>Cons: Requires Microsoft account (not everyone has it). Slightly heavier interface. API is more complex to set up than Google\u2019s.</li> </ul>"},{"location":"mkdocs/gd-alternatives/#2-notion_1","title":"\ud83d\udd39 2. Notion","text":"<ul> <li>Why it might work: Gaining wide adoption in teams. Easy to use. Collaborative. Can export pages to Markdown or PDF.</li> <li>Export/Integration: Can be scripted with Notion API to pull Markdown or HTML. PDFs require headless browser automation.</li> <li>Pros: Clean formatting, good for structured docs. Markdown export is decent.</li> <li>Cons: Markdown export may require cleanup. PDF export not available via API (yet). Not everyone uses it by default.</li> </ul>"},{"location":"mkdocs/gd-alternatives/#3-dropbox-paper_1","title":"\ud83d\udd39 3. Dropbox Paper","text":"<ul> <li>Why it might work: Very simple collaborative editor. Exports to Markdown. Works well for lightweight docs.</li> <li>Export/Integration: Markdown export is available. PDF via print-to-PDF (not easily scriptable).</li> <li>Pros: Cleaner Markdown than Google Docs. Minimalist UI. Easy sharing.</li> <li>Cons: Less widely used than Google Docs or Microsoft Word. Automation is limited.</li> </ul>"},{"location":"mkdocs/gd-alternatives/#4-hackmd-codimd_1","title":"\ud83d\udd39 4. HackMD / CodiMD","text":"<ul> <li>Why it might work: Real-time collaborative Markdown editor. Works in the browser. Ideal if your team is willing to use Markdown directly.</li> <li>Export/Integration: Native Markdown format. Easy to save/export via Git integration.</li> <li>Pros: Native to Markdown. Versioning, GitHub integration. Open-source options.</li> <li>Cons: Requires Markdown fluency. Not as broadly known as Google Docs. More tech-friendly than general-friendly.</li> </ul>"},{"location":"mkdocs/gd-alternatives/#5-etherpad_1","title":"\ud83d\udd39 5. Etherpad","text":"<ul> <li>Why it might work: Lightweight collaborative plain-text/Markdown editor. Open source. Can self-host or use public pads.</li> <li>Export/Integration: Text export (Markdown if you enforce it). API available.</li> <li>Pros: Extremely lightweight. Zero login. Great for open collaboration.</li> <li>Cons: Primitive formatting. Poor for images/tables. Not widely adopted beyond tech/hackathon circles.</li> </ul>"},{"location":"mkdocs/gd-alternatives/#6-confluence-atlassian_1","title":"\ud83d\udd39 6. Confluence (Atlassian)","text":"<ul> <li>Why it might work: Used by many orgs for internal docs. Structured content. Exportable to PDF/Word.</li> <li>Export/Integration: Has REST API. PDF export can be automated with plugins or headless browsers.</li> <li>Pros: Powerful. Familiar to enterprise teams. Organizes pages well.</li> <li>Cons: Not everyone has access. Not free. Heavier weight. Steeper learning curve.</li> </ul>"},{"location":"mkdocs/gd-alternatives/#final-opinion_1","title":"\u2705 Final Opinion","text":"<p>Google Docs is probably still the best overall fit for your needs:</p> <ul> <li>Almost everyone already uses it.</li> <li>It handles images/tables well.</li> <li>It can export clean PDFs or Markdown.</li> <li>The API is scriptable.</li> <li>The versioning (named versions) adds value.</li> </ul> <p>The closest viable alternatives are:</p> <ul> <li>Microsoft Word Online (if your user base leans Microsoft).</li> <li>HackMD (if your users are developers or markdown-fluent).</li> </ul> <p>If you're open to lighter alternatives or your users are more technical, a Markdown-first tool like HackMD could simplify your entire pipeline and skip conversion entirely. But if you want to support anyone, Google Docs is still king for a write-anywhere \u2192 publish-anywhere model.</p>"},{"location":"mkdocs/gd-to-md/","title":"from OpenAi Research on Docs to Markdown Pipelines","text":"<p>Got it. I\u2019ll look for tools, workflows, or examples where Google Docs is used as the editing interface for a documentation system that\u2019s ultimately published with MkDocs (Material theme), using one-way syncing and supporting version control via Git. I\u2019ll prioritize any existing projects or APIs that enable direct or scripted export of Google Docs to Markdown, especially if image handling and formatting integrity are preserved. I\u2019ll let you know what I find.</p>"},{"location":"mkdocs/gd-to-md/#google-docs-to-mkdocs-workflow-tools-solutions","title":"Google Docs to MkDocs Workflow \u2013 Tools &amp; Solutions","text":""},{"location":"mkdocs/gd-to-md/#overview-challenge","title":"Overview &amp; Challenge","text":"<p>Using Google Docs as a collaborative writing platform while publishing to a MkDocs (Material theme) static site is achievable with the right tools. The goal is a one-way sync: content is authored in Google Docs, then converted to Markdown (with images handled appropriately) and version-controlled in Git for MkDocs. Below we outline several tools and workflows to accomplish this, including their pros, cons, and references.</p>"},{"location":"mkdocs/gd-to-md/#1-official-google-docs-markdown-export","title":"1. Official Google Docs Markdown Export","text":"<p>Google Docs now supports native Markdown export. You can go to File &gt; Download &gt; Markdown (.md) to get a Markdown file of your document. Images in the Doc are embedded as base64 data URIs in the exported Markdown, making the <code>.md</code> self-contained. This feature can also be accessed via the Google Drive API (export with MIME type <code>text/markdown</code>).</p> <ul> <li>Pros: Officially supported by Google (high fidelity conversion for headings, lists, tables, etc.); no third-party dependencies. Base64-embedded images mean you don\u2019t have to manually upload image files (the images will render on the MkDocs site as they are part of the HTML).</li> <li>Cons: Base64 images can bloat Markdown files and may impact performance if images are large (since they can\u2019t be cached separately). If you prefer separate image files (for caching or repository clarity), you\u2019ll need an extra step to extract images from the base64 or use another method. Also, the export is not automatic \u2013 you must manually download or script the API.</li> </ul> <p>Automation Tip: Technical users can script this process. For example, using a Python script or CI job to call the Drive API to fetch the <code>.md</code> export (or fetch a <code>.docx</code> and run a converter). This can be integrated into a build pipeline or scheduled task. With the native export, the conversion is done by Google, reducing formatting issues.</p> <p>References: Google\u2019s announcement of Markdown support; Note on base64 image embedding.</p>"},{"location":"mkdocs/gd-to-md/#2-google-docs-add-on-docs-to-markdown-open-source","title":"2. Google Docs Add-on \u2013 \u201cDocs to Markdown\u201d (Open Source)","text":"<p>Docs to Markdown is a popular free add-on for Google Docs (created by a former Google tech writer) that converts a Google Doc to Markdown. After installing it from the Workspace Marketplace, you use the Extensions &gt; Docs to Markdown &gt; Convert menu. The add-on opens a sidebar with the Markdown text, which you then copy-paste into your <code>.md</code> file.</p> <ul> <li>Pros: Free and open-source. Leverages Google Docs\u2019 familiar UI for editing and outputs clean Markdown for most formatting (headings, bold/italic, links, lists, tables, etc.). No separate software needed \u2013 runs within Google Docs.</li> <li>Cons: The workflow is somewhat manual (you must copy the output and paste into your repo). Image handling is not automatic \u2013 the add-on inserts placeholder image tags (e.g. <code>![alt text](images/image1.png)</code>). You must separately retrieve the images (e.g. by File &gt; Download as Web Page (.html) to get a zip of images) and place them in your MkDocs project, updating the image paths. The add-on also has opinionated markdown syntax and a few quirks \u2013 for example, it may use underscores for italics by default and had some issues with link formatting. You should plan to inspect and maybe tweak the output (e.g., confirm links and formatting). It doesn\u2019t directly integrate with Git \u2013 you\u2019ll commit the files manually after conversion.</li> </ul> <p>Use case: This tool is useful if you want a quick copy-paste conversion and are comfortable handling images and Git commits yourself. It\u2019s proven (widely used by documentation teams) but requires a semi-manual process.</p> <p>References: Markdown Guide on Docs to Markdown; Add-on image placeholder behavior.</p>"},{"location":"mkdocs/gd-to-md/#3-google-docs-add-on-docs-to-markdown-pro","title":"3. Google Docs Add-on \u2013 \u201cDocs to Markdown Pro\u201d","text":"<p>Docs to Markdown Pro is an advanced Google Docs add-on that extends the basic conversion with automation features. It can export and push Markdown (and images) directly to a Git repository (GitHub or GitLab) in one click. It also automatically generates static-site front matter for MkDocs (and other SSGs like Jekyll, Hugo, Docusaurus) to ensure the Markdown is publication-ready. The add-on handles images by packaging them or hosting them: you can download a zip containing the Markdown and all images with correct filenames/paths, or publish images to an AWS CloudFront CDN for you (to avoid large binaries in your repo).</p> <ul> <li>Pros: Convenience and integration \u2013 writing, conversion, and publishing are done from within Google Docs. It produces clean, well-formatted Markdown and inserts the YAML front matter expected by MkDocs Material and others. Image handling is robust: no need to manually fix image paths, and images can be automatically compressed and hosted for performance. One-click push to GitHub/GitLab means non-technical collaborators can publish updates without using Git directly. Additional nice features include reusable content snippets and AI-generated alt text for images, improving writing efficiency and accessibility.</li> <li>Cons: This is a third-party proprietary tool (not open-source). You\u2019ll need to install it via Google Marketplace and grant permissions to your docs (and to your Git repo if using the integration). Trust and longevity could be considerations \u2013 you\u2019re relying on a tool maintained outside of Google. The image hosting (CloudFront) feature, while convenient, means your images live on an external service (ensure this aligns with your preferences or policies). If you prefer to keep images in your repo, verify if the add-on allows that (it may by providing the ZIP of images and Markdown for you to commit manually as an alternative). Also, while the add-on might have a free trial or tier, some advanced features could become paid in the future (as it\u2019s presented as a \u201cPro\u201d product).</li> </ul> <p>Use case: Ideal if you want to streamline the Docs-as-code workflow for a team: writers can collaborate in Google Docs and, with minimal technical steps, publish to a MkDocs site. It addresses many pain points (formatting, front matter, image uploads, Git commits) automatically. Just weigh the reliance on a third-party service vs. maintaining your own scripts.</p> <p>References: Feature list from the developer (Reddit post); Medium article on one-click Git publishing and front matter generation.</p>"},{"location":"mkdocs/gd-to-md/#4-custom-scripting-cli-workflows","title":"4. Custom Scripting &amp; CLI Workflows","text":"<p>For full control, you can use scripts or command-line tools to convert Google Docs to Markdown and integrate with Git. This approach typically uses the Google Drive API to fetch document content, then uses a converter like Pandoc or similar to produce Markdown, and finally some mechanism to commit to Git.</p> <ul> <li> <p>Google API + Pandoc: One common workflow is to export the Google Doc as a <code>.docx</code> or HTML and then convert to Markdown with a tool like Pandoc. For example, Stack Overflow users suggest exporting a docx and running Pandoc (or its Python wrapper <code>pypandoc</code>) to get Markdown. Pandoc is very powerful and will handle images (embedded images in the docx will be extracted as image files and referenced in the Markdown automatically). The steps would be: use Drive API to download the Doc (possibly requiring OAuth credentials) \u2013 or if the doc is publicly shareable, construct a download URL \u2013 then run Pandoc to generate <code>.md</code> (plus image files). You can then programmatically commit those files to your Git repo. This could be run on a schedule or triggered manually.</p> </li> <li> <p>Pros: Open-source and highly customizable. Pandoc\u2019s conversion is high quality and you can tweak flags for specific markdown flavors. Images end up as separate files, which is suitable for static site repos (they can be placed in your <code>docs/</code> folder for MkDocs).</p> </li> <li> <p>Cons: Requires scripting and maintenance. You must handle Google auth (or make docs shareable which may not be ideal). Pandoc installation is needed in your environment. There may be edge cases to address (Pandoc might not perfectly convert some complex formatting or Google-specific elements).</p> </li> <li> <p>Google API + html2text: Another scripting method (before official Markdown existed) was to export the Doc as HTML (Google Drive has a \u201czipped HTML\u201d export) and then use a library like <code>html2text</code> to convert HTML to Markdown. This will also require extracting images from the zip. This approach is less direct now that native export is available, but it\u2019s an option if you want to fine-tune the HTML before conversion.</p> </li> <li> <p>Pros: Libraries like html2text or others give decent Markdown output and you can post-process the HTML (for example, ensure certain styles map to desired Markdown syntax).</p> </li> <li> <p>Cons: Similar challenges as above (auth and scripting overhead), and the conversion might not handle all nuances (you may need to clean up the Markdown). In general, this is an older workaround that native export/Pandoc have superseded.</p> </li> <li> <p>Custom Python Script (Example \u2013 iannuttall\u2019s tool): There are open-source scripts tailored for docs-as-code. For instance, iannuttall\u2019s google-docs-to-markdown script on GitHub fetches Google Docs and outputs Markdown with YAML frontmatter for static sites. His workflow expects you to set the doc\u2019s sharing to \u201canyone with link\u201d and then uses requests to download the doc, converting it to Markdown and extracting images to an <code>images/</code> folder. The script can be extended to push to platforms like WordPress, or you could modify it to commit to Git after conversion.</p> </li> <li> <p>Pros: Already implements front matter and image extraction logic, saving you time in writing your own. Being Python, it\u2019s hackable for your needs (e.g., you could integrate a Git push using <code>gitpython</code> or call the GitHub API). It\u2019s open source.</p> </li> <li> <p>Cons: The doc must be shareable or you\u2019d have to integrate OAuth flow. The script is \u201cspecific to [the author\u2019s] needs\u201d as noted, so you might need to adjust it for your folder structure or naming conventions. As with any custom code, you\u2019ll need to test and maintain it.</p> </li> <li> <p>Other Tools/Libraries: The community has developed various small tools \u2013 e.g., older Google Apps Scripts like mangini/gdocs2md (which predated add-ons) and others \u2013 but these are largely superseded by the methods above. Another notable tool is Mr0grog\u2019s Google Docs to Markdown webapp which provides a minimal GUI: you supply a document URL and it converts it in-browser using JS libraries. This could be useful for quick one-off conversions but is not as easily automated for continuous workflow.</p> </li> </ul> <p>Summary \u2013 Pros: Maximum flexibility: you can integrate conversion into build pipelines (for example, write a script that runs nightly or a CI job that triggers on changes). All components (Pandoc, etc.) are open-source. You can maintain formatting integrity by adjusting conversion parameters or doing post-processing (e.g., ensuring code blocks, tables, admonitions syntax meet MkDocs Material requirements). Cons: Requires technical investment. Each Google Doc or set of docs needs to be identified by the script (you might maintain a list of Doc IDs or use a specific Drive folder). Debugging formatting issues falls on you. If Google Docs structure changes or Pandoc has bugs, you\u2019d need to handle those.</p> <p>References: Pandoc method on StackOverflow, html2text method, iannuttall\u2019s script description.</p>"},{"location":"mkdocs/gd-to-md/#5-github-action-google-docs-to-github","title":"5. GitHub Action \u2013 Google Docs to GitHub","text":"<p>If you prefer automation on the Git side, the community offers a GitHub Action (workflow) that periodically syncs Google Docs to your repository. Notably, the r7kamura/google-docs-to-github Action can search a Google Drive folder for docs, convert them to Markdown, and push to your repo on a schedule. You would place all your documentation Google Docs in a shared Drive folder, and set up this Action with a Google service account credential.</p> <ul> <li>Pros: Fully automated syncing. You can \u201cset it and forget it\u201d \u2013 for example, schedule the Action to run nightly or hourly, so any changes in Docs are propagated to Git without manual intervention. It uses Google\u2019s API under the hood, so it likely leverages the official export (ensuring accurate conversion). This is open-source, and you can inspect or fork it for custom behavior. Using a service account and a shared folder adds security \u2013 you don\u2019t need to expose personal credentials, and you control exactly which docs are synced.</li> <li>Cons: Initial setup is more involved: you must create a Google Cloud service account, grant it access to the Docs folder, and configure GitHub secrets for authentication. This is a one-time effort but does require familiarity with Google Cloud IAM and GitHub Actions YAML. Also, the action will commit changes whenever it runs, so you\u2019ll want to ensure it\u2019s only picking up intentional edits (organize your Docs folder accordingly). Image handling will be whatever the Google export provides \u2013 currently that means images will appear as base64 in the Markdown unless the action processes them differently. If having actual image files in the repo is important, you might need to modify the workflow to download images separately. Finally, as with any scheduled sync, there\u2019s a slight delay (not real-time collaboration, but the user accepted that).</li> </ul> <p>Use case: This suits a more DevOps-oriented documentation pipeline. For example, documentation writers work in Google Docs freely; once a day the latest content is auto-committed to the MkDocs repo; and then a deploy (Netlify, GitHub Pages, etc.) can rebuild the static site. It ensures your Git history is always up to date with the Google Doc content. This approach minimizes manual steps after initial setup.</p> <p>References: GitHub Action by r7kamura description and setup instructions.</p>"},{"location":"mkdocs/gd-to-md/#recommendations-best-practices","title":"Recommendations &amp; Best Practices","text":"<p>Choosing a Solution: If you value simplicity and reliability of output, start with Google\u2019s built-in Markdown export. It\u2019s officially supported and less likely to break on Google\u2019s end. You can incorporate it into a script or Action for automation. If your team members are less technical and you want to minimize their effort, the Docs to Markdown Pro add-on offers a very user-friendly path (Google Docs becomes a true CMS for your static site, at the cost of relying on a third-party). For a completely open-source approach with full control, consider a Pandoc-based script or the GitHub Action \u2013 these require more setup but run autonomously once configured.</p> <p>Maintaining Formatting Integrity: No matter which path, keep your source Google Docs style consistent with how you want the Markdown. Use standard Google Docs features: for headings, use the built-in Heading styles (so they convert to <code># Heading</code> in Markdown). Use normal bullet/number lists (they convert cleanly to <code>-</code> or <code>1.</code> lists). Avoid overly complex formatting or unsupported features (e.g., Google Drawings don\u2019t export via API). Tables and code blocks should generally convert (the official exporter and add-ons handle tables, with the official exporter even converting to Markdown table syntax). After conversion, review edge cases: for example, footnotes or embedded links might need a check. If using the open-source add-on, be prepared to fix minor syntax issues (as noted in user feedback). In MkDocs Material, you might want to add YAML metadata (like title, description) to the pages \u2013 the Pro add-on and some scripts can insert this for you. If not, you can also manage page meta via MkDocs config or by manually adding front matter once.</p> <p>Image Handling: Decide early how you want to manage images. Base64 embedding (as with Google\u2019s native export) means you don\u2019t have to manage files, but your Markdown (and resulting HTML) will be larger. This can be acceptable for a small number of images or diagrams. If you have many or large images, consider extracting them: a script or Pandoc can output image files, or use the Pro add-on\u2019s zip to get images, so you can store images under <code>docs/images/</code> in your repo and let MkDocs serve them. Storing images in the repo keeps them versioned but does bloat the Git history; an alternative is what Docs to Markdown Pro offers \u2013 offloading images to an external host (CDN) and just linking them. For a private or self-contained site, keeping images locally is usually fine. For public high-traffic docs, external hosting or a CDN might improve load times. In either case, ensure the Markdown references point correctly to the image locations that MkDocs will serve (relative paths for local images in <code>docs/</code> folder, or absolute URLs for CDN images). Test a sample page after conversion to confirm images appear.</p> <p>Automation and Workflow: Since real-time sync isn\u2019t required, a periodic update workflow is sensible. For example, you could use the GitHub Action or a cron job on your own server to run nightly. Alternatively, some teams trigger the sync manually when a doc is ready to publish (e.g., run a script locally or via a CI job). If using an automated pipeline, incorporate some logging or notifications so you know if a sync failed (especially because Google API calls can fail if credentials expire). Also, consider using a \u201clast updated\u201d timestamp or commit message that notes the source Google Doc revision (if available), so you have traceability from the Git history back to Google Docs changes.</p> <p>In summary, Google Docs -&gt; MkDocs workflows are well-trodden: you have multiple open-source and commercial tools at your disposal. Many teams use Google Docs for its unparalleled collaboration features and then convert to Markdown for docs-as-code publishing. By choosing the right tool or combination (even if no single tool covers everything, you can chain them), you can maintain a smooth writing experience and a robust, version-controlled static site. The key is to balance convenience with control: start with the solution that meets your team\u2019s comfort level, and iterate (you can always adjust the pipeline if you find formatting issues or needs for more automation). With the references and tools above, you should be able to implement a workflow where Google Docs is your editing hub and MkDocs Material is your polished publication site.</p> <p>Sources: The information and tools described are drawn from official Google Workspace updates, documentation add-on wikis, developer blogs and tutorials, and community solutions on GitHub and Stack Overflow. Each cited source provides further detail on setup and usage for the respective tool.</p>"},{"location":"mkdocs/gd-to-pdf/","title":"Gd to pdf","text":"<p>Understood. I\u2019ll look into automating a workflow where Google Docs are exported as PDFs and embedded into a MkDocs site using PDF.js, with minimal manual intervention. I\u2019ll prioritize solutions that use the Google Drive API to pull PDFs, maintain a mapping of document IDs to display names (possibly via a config file or Google Sheet), and support cloud hosting or direct linking. I\u2019ll get back to you shortly with detailed options.</p>"},{"location":"mkdocs/gd-to-pdf/#integrating-google-docs-into-mkdocs-via-automated-pdf-exports","title":"Integrating Google Docs into MkDocs via Automated PDF Exports","text":""},{"location":"mkdocs/gd-to-pdf/#overview-and-requirements","title":"Overview and Requirements","text":"<p>Using Google Docs as a content source for an MkDocs site is feasible by exporting each Google Doc as a PDF and embedding it in the site. The goal is to automate this workflow end-to-end \u2013 from fetching the latest Google Doc content, converting to PDF, and updating the MkDocs site \u2013 without manual steps. Key requirements include:</p> <ul> <li>Automated PDF Export: Use Google Drive\u2019s API to export Google Docs to PDF format programmatically (no manual downloads).</li> <li>Inline Viewing with PDF.js: Embed the PDFs in MkDocs pages so readers can view them on the site (using PDF.js for a consistent in-browser PDF viewer experience).</li> <li>External PDF Storage: Avoid storing PDFs in the Git repo. PDFs can be hosted on a remote service (Google Drive, AWS S3, etc.) and loaded in the site viewer via a URL.</li> <li>Doc ID to Name Mapping: Maintain a mapping of Google Doc IDs to display titles (e.g. in a config file or Google Sheet) so the site can refer to documents by a friendly name.</li> <li>CI/CD Integration: Integrate the export-and-update process into the site\u2019s build pipeline or a scheduled job, so that Google Doc changes are periodically pulled into the site.</li> <li>Preserve Formatting: Ensure the PDF approach preserves the original Google Doc formatting (styles, images, page layout), addressing any issues of fidelity that might arise from other conversion methods.</li> </ul>"},{"location":"mkdocs/gd-to-pdf/#exporting-google-docs-to-pdf-via-google-drive-api","title":"Exporting Google Docs to PDF via Google Drive API","text":"<p>Google provides a Drive API that can export Google Workspace documents (Docs, Sheets, etc.) to various formats, including PDF. Using this API in an automated script is the recommended approach for obtaining PDFs of each document:</p> <ul> <li>Drive API <code>files.export</code>: The Drive API\u2019s <code>files.export</code> method allows downloading a Google Doc\u2019s content as a PDF by file ID. This returns the PDF bytes, which your script can save to a file. Example: using Drive API v3, <code>files().export(fileId=&lt;DOC_ID&gt;, mimeType='application/pdf').executeMediaAndDownloadTo(outstream)</code> in Python (or the equivalent in Node.js) will retrieve the PDF content.</li> <li>Authentication: Set up credentials for the API. Common approaches include OAuth2 with a service account or saved refresh token. For CI usage, a service account is convenient \u2013 share the Google Docs with the service account\u2019s email, and use its JSON key for Drive API auth (scoped to read Drive files). Alternatively, an OAuth client with Drive read-only scope can be used, storing the refresh token as a secret in CI.</li> <li>Identifying Documents: If you have the Google Doc IDs already (from a mapping file), you can directly call the export on each ID. If you only know names, you can use <code>drive.files.list</code> with a query (e.g. <code>name = \"Doc Title\"</code>) to find the ID, but using fixed IDs is more reliable (since names aren\u2019t guaranteed unique and can change).</li> <li>Size Limits: Note that exported content via the API is limited to 10 MB per document. Most text documents are smaller than this, but if your Google Docs include many images or are very large, keep this limit in mind. (If a document exceeds 10 MB PDF size, you may need to split it or handle it specially.)</li> <li>Error Handling: The script should handle API errors (network issues, auth expiration, etc.) gracefully \u2013 e.g. retry on transient failures and refresh credentials when needed.</li> </ul> <p>Example Tooling: You can write this export script in Python (using <code>googleapiclient.discovery</code> for Drive API) or Node.js (<code>@googleapis/drive</code> library). Google\u2019s documentation provides sample code for exporting a Doc as PDF. This script can be run in a CI pipeline or a scheduled job to always fetch the latest version of each doc.</p>"},{"location":"mkdocs/gd-to-pdf/#managing-the-doc-id-to-name-mapping","title":"Managing the Doc ID to Name Mapping","text":"<p>To dynamically include multiple Google Docs in your site, maintain a mapping of each document\u2019s Google Drive ID to a desired display name or title. This mapping can be stored in a few ways:</p> <ul> <li>Configuration File: Keep a YAML/JSON file in the repository listing each Doc ID and its corresponding title (and optionally, target filename). For example:</li> </ul> <pre><code>docs_mapping:\n  - id: 1AbCdEfGhIJKL1234567890    # Google Doc ID\n    title: \"Project Overview\"\n    filename: \"project-overview.pdf\"\n  - id: 0ZyXwVuTsRqPoN987654321    # another Doc ID\n    title: \"User Guide\"\n    filename: \"user-guide.pdf\"\n</code></pre> <p>The script can read this config to know which docs to export and what to name them. This approach is straightforward and version-controlled, but requires updating the file for any new or renamed docs.</p> <ul> <li> <p>Google Sheet as Mapping Source: Use a Google Sheet to allow non-developers to manage the list of docs. The sheet might have columns for Doc ID, Title, etc. Your pipeline can use the Google Sheets API to fetch this data (or publish the sheet as CSV for simple retrieval). For example, a sheet could list all relevant document IDs and names, and the script reads it to know what to process. This gives a friendly UI for updates, at the cost of adding a Sheets API integration. (The same Google API credentials can often be used if scoped for Sheets read access as well.)</p> </li> <li> <p>Drive Folder Query (alternative): If all docs reside in a specific Google Drive folder, the script could list all files in that folder via the Drive API and use each file\u2019s name as the display title. However, this may give less control over ordering or naming conventions. It\u2019s usually clearer to maintain an explicit list as above.</p> </li> </ul> <p>Regardless of method, the mapping is used to generate links or navigation in MkDocs. For instance, you might use the mapping to create MkDocs nav entries or pages for each document title, or to populate an index page with links. This ensures each Google Doc\u2019s content can be identified by a human-friendly name on the site.</p>"},{"location":"mkdocs/gd-to-pdf/#pdf-hosting-options-and-access-control","title":"PDF Hosting Options and Access Control","text":"<p>Where to store the PDFs? Since the PDFs need not live in your Git repository, you have flexibility in hosting them. The choice affects how you embed them and manage access:</p> <ul> <li>1. Google Drive (Direct Links): You could host the PDFs on Google Drive itself, avoiding any file transfer out of Google. Every Google Doc can be accessed via a Drive link if shared appropriately. For example, setting a file\u2019s sharing to \u201cAnyone with the link can view\u201d provides a <code>webContentLink</code> (download URL) and <code>webViewLink</code> for the file. In practice, the embeddable form of a Drive link is to use the file\u2019s <code>/preview</code> URL. For example:</li> </ul> <pre><code>&lt;iframe src=\"https://drive.google.com/file/d/&lt;FILE_ID&gt;/preview\" width=\"100%\" height=\"600\"&gt;&lt;/iframe&gt;\n</code></pre> <p>This uses Google\u2019s own PDF viewer embed. It will display the PDF within an iframe, as if previewing it on Drive. (This is not PDF.js, but Google\u2019s viewer.) While this approach requires no additional hosting, there are some caveats: the user\u2019s browser may need to allow third-party cookies (Google\u2019s viewer might be considered third-party on your domain), and Google\u2019s interface may add a toolbar or padding that you can\u2019t fully control. Also, if the docs aren\u2019t publicly shared, this won\u2019t work \u2013 the user would hit a permission wall. Using Google Drive links is best when the content is okay to be publicly accessible. It\u2019s quick to set up but offers less control over the viewing experience (and if Google changes their embed behavior, it could affect your site).</p> <ul> <li> <p>2. External File Storage (S3, etc.): A robust option is to upload the exported PDFs to a storage service like Amazon S3, Google Cloud Storage, or another CDN/storage bucket. The pipeline after exporting the PDFs can programmatically upload them to a bucket (naming them by the doc title or ID). The bucket can be configured to host files publicly or with controlled access. For embedding via PDF.js, the PDFs should be reachable via a public URL or a presigned URL (if you need access control). Pros of this approach: you have full control over URLs and can set HTTP headers (for caching, CORS, etc.). It decouples the content from Google Drive after export. Con: it introduces another moving part (cloud storage credentials and potential cost for bandwidth/storage). For example, after fetching a PDF, the script could use AWS CLI or SDK to upload <code>Project_Overview.pdf</code> to S3 and then use the S3 link in the site. Many CI systems can inject cloud credentials to facilitate this upload step.</p> </li> <li> <p>3. Serve via MkDocs Site: Another approach is to include the PDFs as part of the site\u2019s static files during the build (e.g., placing them in the <code>docs/</code> directory or another designated static media folder). MkDocs will then output them to the site\u2019s URL space (e.g., <code>https://your-site.com/files/project-overview.pdf</code>). This keeps everything on the same domain. You can configure MkDocs to ignore these files in version control (so they aren\u2019t committed, perhaps by downloading them at build time only). The upside is simplicity \u2013 no external hosting needed, and the PDF URL is within your site. Also, being on the same domain avoids any cross-origin concerns. The downside is that your deployed site may become heavier (multiple large PDFs), and if you use GitHub Pages or similar, you might not want to push huge binary files frequently. However, if you deploy via CI, you can have the CI add the PDFs to the output (gh-pages branch or a publish artifact) without polluting the source repo. This method works well if the number/size of PDFs is moderate.</p> </li> </ul> <p>Access Control Considerations: If your documentation site is public and the Google Docs are not sensitive, the above options can be open. If the docs are private or internal-only, embedding gets tricky because static sites can\u2019t easily enforce login. In such cases, you might consider hosting the site itself internally or behind an authentication proxy so that only authorized users can access the pages (and thus the PDFs). Alternatively, using signed URLs for PDFs (that expire or require a token) could restrict access, but distributing those via a static page is still effectively public while the link is valid. Generally, for private content, the simplest route is to keep the site on an internal network or require VPN/access control to view it. If that\u2019s not possible, you may have to reconsider using PDF.js embed for truly secret docs, since any determined user could still download the PDF from the browser. In summary, for public docs all methods are fine; for private docs ensure the hosting environment has some access restriction if needed (or accept that \u201canyone with the link\u201d can view if using public links).</p>"},{"location":"mkdocs/gd-to-pdf/#embedding-pdfs-in-mkdocs-with-pdfjs","title":"Embedding PDFs in MkDocs with PDF.js","text":"<p>Once the PDFs are hosted and retrievable via URL, the MkDocs site needs to embed them for inline viewing. PDF.js is a JavaScript library that renders PDFs in-browser and provides a consistent viewer UI (independent of the browser\u2019s native PDF plug-in). Integrating PDF.js into MkDocs involves adding the PDF.js viewer files to your site and using an HTML snippet (often via Markdown) to load the PDF. Key approaches and tools:</p> <ul> <li>Using PDF.js Viewer: The PDF.js project provides a ready-made HTML viewer. You can include the PDF.js assets in your MkDocs project (for example, by downloading the PDF.js release and copying the <code>web</code> viewer directory into your <code>docs/</code> or the MkDocs <code>extra_javascript</code>/<code>extra_css</code> pipeline). Once included, you can open a PDF with it by pointing an iframe to the viewer HTML and providing the PDF URL as a query parameter. For instance, if you placed PDF.js\u2019s <code>viewer.html</code> at <code>site/pdfjs/web/viewer.html</code>, you can embed a PDF like so:</li> </ul> <pre><code>&lt;iframe src=\"/pdfjs/web/viewer.html?file=https%3A%2F%2Fmy-cdn.com%2Fdocs%2Fproject-overview.pdf\" \n        width=\"100%\" height=\"600\" style=\"border:none;\"&gt;&lt;/iframe&gt;\n</code></pre> <p>In this example, the <code>file=</code> URL is URL-encoded. PDF.js will fetch that PDF and display it with a toolbar (pagination, zoom, search, etc.). Note: If the PDF is hosted on a different domain (e.g., S3 or Drive), ensure that server allows cross-origin requests (CORS) so PDF.js can fetch it via XHR. If the PDF is on the same domain (e.g., bundled with the site), CORS isn\u2019t an issue.</p> <p>Pros: Full-featured viewer, consistent UI across browsers. Users can search text, navigate pages, print, etc., all inline. You can even customize the viewer\u2019s look and controls (PDF.js\u2019s HTML/CSS can be modified if needed).   Cons: Adds extra files (the PDF.js script is \\~2MB and supporting files for the viewer). Also, embedding via iframe means the viewer controls are confined to that frame. Ensure the iframe is sized adequately (you might use responsive CSS or a fullscreen link). Some users on mobile devices might still prefer downloading the PDF if the viewer is too small on screen \u2013 testing on multiple devices is advised.</p> <ul> <li>MkDocs Embed via Browser PDF Plugin: A simpler alternative (if you didn\u2019t want the full PDF.js interface) is to use HTML <code>&lt;object&gt;</code> or <code>&lt;embed&gt;</code> tags in your Markdown to let the browser display the PDF. Modern browsers like Chrome and Firefox use PDF.js internally or native PDF plugins, so often a PDF will display inline without extra effort. For example, you can embed like:</li> </ul> <pre><code>&lt;object data=\"https://my-cdn.com/docs/project-overview.pdf\" type=\"application/pdf\" width=\"100%\" height=\"600\"&gt;\n    &lt;embed src=\"https://my-cdn.com/docs/project-overview.pdf\" type=\"application/pdf\" /&gt;\n&lt;/object&gt;\n</code></pre> <p>This was demonstrated as a solution for MkDocs on Stack Overflow. Using this approach in MkDocs may require allowing raw HTML in Markdown (MkDocs and Material for MkDocs generally support HTML in Markdown). If you use the Material theme with macros, you can even factor the URL into a variable as shown in that example.</p> <p>Additionally, there is an MkDocs plugin called <code>mkdocs-pdf</code> that simplifies PDF embedding. With <code>mkdocs-pdf</code> installed and enabled, you can embed a PDF using Markdown image syntax, for example:</p> <pre><code>![Document Title](docs/project-overview.pdf){ type=application/pdf style=\"width:100%; min-height:25vh;\" }\n</code></pre> <p>The plugin will ensure this is rendered as an embedded PDF object in the page. This saves you from writing raw HTML and can be more portable. However, note that this still relies on the browser\u2019s PDF capabilities (it basically inserts an <code>&lt;embed&gt;</code> under the hood), not the full PDF.js UI. So it\u2019s an easier solution if you just want the PDF displayed and don\u2019t mind using the native viewer.</p> <ul> <li> <p>Comparison \u2013 Browser Native vs PDF.js: Using the native <code>&lt;object&gt;</code>/<code>&lt;embed&gt;</code> is simpler and involves no additional libraries. On desktop browsers, users might not notice a difference (since Chrome, Firefox, Edge will display PDFs inline by default). But on some mobile browsers or older browsers, PDF viewing might not be supported and could force a download. PDF.js ensures that as long as the user\u2019s device can run the JS, the PDF will render in-page consistently. If features like text search, selectable text, or a uniform toolbar are important, PDF.js is the way to go. If you prefer not to add \\~2MB of script and are okay with relying on the user\u2019s PDF plugin, the simpler embed could suffice.</p> </li> <li> <p>Embedding Multiple PDFs or Linking: Depending on your content strategy, you might create one MkDocs page per PDF (each page contains an embed of one Google Doc\u2019s PDF). This way, you can list those pages in the MkDocs navigation using the display names. When users click the nav item, it opens the page with the embedded PDF viewer. Alternatively, you could have an index page listing documents with either inline frames or links that open the PDF in a new tab or in the PDF.js full viewer. For example, PDF.js\u2019s viewer can be opened full-screen via a direct link as well (using the same <code>viewer.html?file=...</code> URL, but perhaps navigated directly instead of iframed). Choose the approach that best fits your UX \u2013 a dedicated page per doc is usually clean and lets you add context or descriptions around the PDF if needed.</p> </li> </ul>"},{"location":"mkdocs/gd-to-pdf/#automating-the-workflow-cicd","title":"Automating the Workflow (CI/CD)","text":"<p>With the export, storage, and embedding methods defined, the final piece is automation. The entire pipeline from Google Doc to MkDocs site can be integrated into your continuous integration/deployment process:</p> <ol> <li> <p>Script the Conversion: Create a script (in Python, Node, or your preferred language) that takes the mapping of docs, iterates through each ID, and performs:</p> </li> <li> <p>Drive API call to export the doc as PDF (saving to a temp file or memory).</p> </li> <li>Save or upload the PDF to the chosen location (e.g., push to S3 via AWS SDK, or save into the <code>docs/</code> directory for MkDocs).</li> <li> <p>(Optional) Generate or update a Markdown page for that doc if needed. For instance, you might have a template like <code>doc-template.md</code> that you fill with the iframe or embed code pointing to the new PDF URL and named appropriately. This can be done dynamically so that each Google Doc has a corresponding <code>.md</code> page generated/updated.</p> </li> <li> <p>Integrate with MkDocs Build: If using a CI pipeline (like GitHub Actions, GitLab CI, etc.), run the above script as a step before the MkDocs site is built (or as part of a pre-deploy step). This ensures that the latest PDFs are in place. For example, a GitHub Action could be scheduled nightly or triggered on push; it would checkout the repo, run <code>generate_pdfs.py</code> (your script), commit or add the generated files (if they need to be in the repo for nav), then run <code>mkdocs build</code> and deploy. If PDFs are kept out of the repo, you might skip committing and just ensure they are present in the build artifact.</p> </li> <li> <p>Scheduled Updates: For truly up-to-date docs, you can schedule the CI job to run periodically (using CRON triggers in GitHub Actions or a Jenkins job, etc.). This way, even if no code changes occur, the documentation site will refresh the Google Docs content. A strategy to reduce unnecessary work: use the Drive API\u2019s file metadata (<code>modifiedTime</code>) to check if a doc has changed since the last run. The script could cache timestamps (perhaps in a state file or by comparing last-downloaded file hash) and only re-fetch PDFs for docs that have updated. This saves time and bandwidth, especially if some docs rarely change.</p> </li> <li> <p>Continuous Delivery: If your site is deployed via a platform (GitHub Pages, Netlify, etc.), integrate the output of MkDocs build. For GitHub Pages, one approach is to have the CI push the built site (with PDFs) to the <code>gh-pages</code> branch. Alternatively, Netlify can auto-build on new commits \u2013 in that case, your repo might include the PDF generation in a pre-build hook. Ensure large PDFs don\u2019t exceed any repo or build quotas. If using external hosting for PDFs, the site build might not need to handle the binary files at all, just ensure the links are correct.</p> </li> <li> <p>Caching and CDN Invalidation: When the pipeline updates PDFs, consider caching. If using a CDN (Content Delivery Network) or if users\u2019 browsers cache the PDF, they might not see the update immediately. Mitigate this by:</p> </li> <li> <p>Versioning the PDF filenames or URLs. For example, include a timestamp or document revision in the S3 object key (e.g., <code>project-overview_v20231101.pdf</code>). Update the embed link accordingly in the page. This ensures a changed document has a new URL, so no old cache will appear.</p> </li> <li>If keeping the same URL, configure appropriate HTTP headers. You might set a short cache-control max-age for PDFs, or use an ETag/Last-Modified header so the browser can revalidate.</li> <li>On CDNs like CloudFront, you can programmatically invalidate the old PDF path whenever you upload a new version (though this has cost considerations for large-scale use).</li> <li>In MkDocs pages, if you want a quick hack, you can append a query parameter to the PDF URL (like <code>.../project-overview.pdf?ver=12345</code>). Browsers treat different query strings as different resources, so this can bust caches. Your automation script could update that <code>ver</code> parameter with a timestamp or increment each time.</li> </ol> <p>By setting up the above, your MkDocs site will automatically stay in sync with the Google Docs. Team members can continue collaborating in Google Docs for content creation (benefiting from Google\u2019s rich editing and real-time collaboration), and the website will reflect those changes on the next scheduled update. This greatly reduces manual work and the risk of documentation drifting out-of-date.</p>"},{"location":"mkdocs/gd-to-pdf/#additional-considerations-formatting-and-preservation","title":"Additional Considerations (Formatting and Preservation)","text":"<ul> <li> <p>Formatting Preservation: PDFs generally preserve the exact layout and formatting of Google Docs, including images, tables, headers/footers, and styling. This is a major advantage over converting Google Docs to Markdown or HTML, which can be lossy or require extensive post-conversion fixes. By using PDF export, you ensure that what viewers see on the site is exactly what authors saw in Google Docs. However, be mindful of page-oriented layout in PDFs \u2013 if your doc has multiple pages, the PDF.js viewer will show page boundaries. This is usually fine (and expected in a PDF), but it\u2019s a different experience than a continuous scrolling webpage. If having a continuous single-page view is important, a direct HTML conversion would be needed, but that sacrifices some fidelity.</p> </li> <li> <p>PDF Styling in Viewer: PDF.js will apply its own viewer interface around the PDF content. You can customize it (for example, hide certain toolbar buttons) by editing the viewer HTML or using custom JS/CSS as documented by PDF.js. This is optional, but if you have specific needs (like removing the print/download buttons to keep users on the site), it\u2019s possible to tweak. Keep in mind that truly preventing download is impossible \u2013 if someone can view a PDF, they can theoretically download it \u2013 but you can remove the easy-download button if desired.</p> </li> <li> <p>Testing Access: If using private Google Docs with a service account, test the pipeline thoroughly. Make sure the service account can indeed access the doc (it should be explicitly shared to it or have domain-wide access if in an organization). If using OAuth user credentials, ensure the token is refreshed properly on schedule (Drive refresh tokens usually last indefinitely if the <code>offline</code> access was granted, but they can be revoked or expire in certain cases, so have a re-auth strategy if the token fails).</p> </li> <li> <p>Pros/Cons Summary:</p> </li> <li> <p>Google Drive hosting vs External: Drive hosting saves an upload step but can be less controllable and might impose Google\u2019s UI; external hosting gives full control at cost of complexity.</p> </li> <li>PDF.js vs Native PDF Embed: PDF.js provides a uniform, feature-rich viewer, but adds overhead; native embed is simpler but depends on client support.</li> <li>Automation Complexity: Building a custom script requires some familiarity with Google APIs and CI scripting, but it\u2019s a one-time effort that pays off with seamless updates. There are also no-code/low-code alternatives (e.g. using Zapier/Make.com to watch a Drive folder and output to S3) \u2013 those could be explored, but they may not integrate as cleanly with MkDocs navigation and might be harder to customize.</li> </ul>"},{"location":"mkdocs/gd-to-pdf/#actionable-implementation-plan","title":"Actionable Implementation Plan","text":"<p>Bringing it all together: Here\u2019s a high-level plan to implement the integration, incorporating the best practices discussed:</p> <ol> <li> <p>Prepare Google API Access: Create a Google Cloud project and enable the Drive API (and Sheets API if using Google Sheet for mapping). Set up a service account with Drive file access, or an OAuth client ID for manual auth. Share the Google Docs (or the folder containing them) with the service account if applicable. Download the JSON key or OAuth tokens and add them to your CI securely (e.g., as GitHub Actions secrets).</p> </li> <li> <p>Write the Export Script: Develop a script (e.g., <code>export_docs.py</code>). It should:</p> </li> <li> <p>Read the doc ID -&gt; name mapping (from a local config file or by fetching the Google Sheet).</p> </li> <li>For each entry, call the Drive API to export PDF. Save the PDF to a temp location.</li> <li>Upload or move the PDF to the hosting location. For example, use <code>boto3</code> to put it to S3 with a proper key (possibly including version/timestamp). Or, if integrating into the site directly, save it into <code>docs/pdfs/&lt;name&gt;.pdf</code> within the MkDocs source before build.</li> <li> <p>If needed, update/generate a Markdown page or HTML snippet for each PDF. This could be as simple as writing an <code>.md</code> file that contains an <code>&lt;iframe&gt;</code> pointing to the PDF\u2019s URL and a title. (If the nav is static, you might pre-create these pages with placeholders that your script can update, or use Jinja templates in MkDocs to loop through a list.)</p> </li> <li> <p>MkDocs Configuration: In <code>mkdocs.yml</code>, add navigation entries for the document pages (unless you generate a single index page). For example:</p> </li> </ol> <pre><code>nav:\n  - Home: index.md\n  - Documents:\n      - Project Overview: docs/project-overview.md\n      - User Guide: docs/user-guide.md\n</code></pre> <p>Ensure any custom scripts (like PDF.js) are included. You might put the PDF.js files in <code>docs/pdfjs/...</code> so they get deployed; you can use <code>extra_javascript</code> in MkDocs config if needed to load additional JS (though for PDF.js the iframe pointing to <code>viewer.html</code> might be enough, no need to include scripts globally).</p> <ol> <li> <p>Test Locally: Run the script locally to fetch PDFs and place them, then serve MkDocs locally (<code>mkdocs serve</code>). Verify that the PDFs display inline as expected (check viewer controls, accessibility, etc.). Adjust dimensions or styling as needed (you can, for instance, constrain the iframe height via CSS or allow it to expand). If using external hosting, test that the URLs are correct and that CORS is not blocking PDF retrieval. If something isn\u2019t showing, check the browser console for CORS errors or permission issues.</p> </li> <li> <p>Set Up CI/CD: Add a workflow in your CI to run the export script and build the site. For example, in GitHub Actions, a job could trigger on a schedule (e.g., nightly) or on push. Pseudocode for steps:</p> </li> </ol> <pre><code>- uses: actions/checkout@v3\n- name: Set up Python (or Node)\n  uses: actions/setup-python@v4\n- name: Install deps\n  run: pip install -r requirements.txt   # (google-api-python-client, etc.)\n- name: Export Google Docs to PDFs\n  run: python export_docs.py\n  env:\n    GOOGLE_APPLICATION_CREDENTIALS: drive-key.json  # or use secure env for tokens\n- name: Build MkDocs\n  run: mkdocs build\n- name: Deploy to GitHub Pages\n  uses: peaceiris/actions-gh-pages@v3\n  with: \n    # ... configuration for deploying the site ...\n</code></pre> <p>Ensure the credentials (JSON key or tokens) are provided to the action (store them as secrets and write to a file in the job, or use an action for GCP auth). If pushing to an S3 bucket, add a step with AWS credentials set in env to upload the PDFs (or consider deploying the entire site to an S3 static site bucket).</p> <ol> <li>Monitoring and Maintenance: Once deployed, monitor that the update job runs successfully. If a Google Doc is edited, verify that the changes show up on the site after the next run. Set caching headers appropriately so you aren\u2019t serving stale content. If using Cloud storage, periodically clean up old versions if you chose to keep versioned filenames (to avoid clutter or extra costs). Keep the mapping up-to-date when new docs need to be added \u2013 adding it to the sheet or config and then letting the pipeline pick it up.</li> </ol> <p>By following this plan, you\u2019ll have a system where documentation writers can work in Google Docs, and those documents will be automatically published to an MkDocs static site with minimal delay. This marries the ease of Google Docs editing with the polish and navigability of a static documentation site. The use of PDF and PDF.js ensures the content\u2019s appearance remains consistent, while the automated pipeline handles the heavy lifting of export and deployment.</p> <p>References: Keeping these references handy can help during implementation: Google\u2019s Drive API documentation for file export, Stack Overflow solutions for embedding PDFs in MkDocs, and PDF.js integration guides (noting the need for cross-domain access if applicable). With these in mind, you can confidently set up the workflow that meets all the stated requirements. Good luck with your integration!</p>"}]}